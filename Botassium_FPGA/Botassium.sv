
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Botassium(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// Accelerometer and EEPROM //////////
	G_SENSOR_CS_N,
	G_SENSOR_INT,
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	GPIO_2,
	GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	PI,
	PI_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO,
	GPIO_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SW //////////
input 		     [3:0]		SW;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// Accelerometer and EEPROM //////////
output		          		G_SENSOR_CS_N;
input 		          		G_SENSOR_INT;
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// ADC //////////
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;

//////////// 2x13 GPIO Header //////////
inout 		    [12:0]		GPIO_2;
input 		     [2:0]		GPIO_2_IN;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		PI;
input 		     [1:0]		PI_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO;
input 		     [1:0]		GPIO_IN;


//=======================================================
//  REG/WIRE declarations
//=======================================================

	logic clk2, clock, clk;
	logic [31:0] reduce, reduce2, reduce3;
	assign reduce = 32'd1000000;
	assign reduce2 = 32'd100000;
	assign reduce3 = 32'd5;
	logic read, codeAL, codeBL, codeAR, codeBR;
	logic[31:0] wheel_left, wheel_right;
	assign codeAL = GPIO[0];
	assign codeBL = GPIO_IN[0];
	assign codeAR = GPIO[1];
	assign codeBR = GPIO[2];


//=======================================================
//  Structural coding
//=======================================================

//=======================================================
//  SPI
//=======================================================

	logic 			spi_clk, spi_cs, spi_mosi, spi_miso, CLOCK,clk3, writeE;
	logic [31:0] spi_data, WriteDataM;
	logic [3:0] address;

	spi_slave spi_slave_instance(
		.SPI_CLK    (spi_clk),
		.SPI_CS     (spi_cs),
		.SPI_MOSI   (spi_mosi),
		.SPI_MISO   (spi_miso),
		.Data_Addr  (address),
		.Data_WE    (writeE),
		.Data_Write (WriteDataM),
		.Data_Read  (spi_data),
		.Clk        (CLOCK_50)
	);
	
	assign spi_clk  		= PI[11];	// SCLK = pin 16 = GPIO_11
	assign spi_cs   		= PI[9];	// CE0  = pin 14 = GPIO_9
	assign spi_mosi     	= PI[15];	// MOSI = pin 20 = GPIO_15
	
	assign PI[13] = spi_cs ? 1'bz : spi_miso;  // MISO = pin 18 = GPIO_13
	
	
//==============================	
// READ/WRITE LOGIC
//==============================	
	typedef enum logic [1:0]{S0,S1,S2, S3} statetype;
	statetype state, nextstate;
	always_ff @(posedge clk2) begin
		state <= nextstate;
		if(writeEncoderR)begin
			address <= 4'h0;
			writeE <=1;
			WriteDataM <= wheel_right;
		end
		else if(writeEncoderL)begin
			address <= 4'h1;
			writeE <=1;
			WriteDataM <= wheel_left;
		end
		else if(readLED) begin
			address <=4'h0;
			writeE <= 0;
			LED <= spi_data[7:0];
		end
		else if(writeLaser) begin
			address <= 4'h2;
			writeE <=1;
			WriteDataM <= laser;
		end
	end
	
//==============================	
//NEXTSTATE LOGIC
//==============================	
	logic writeEncoderR, writeEncoderL, readLED, writeLaser;
	always_comb begin
		// Default value
		nextstate = state;
		writeEncoderR = 0;
		writeEncoderL = 0;
		readLED = 0;
		writeLaser = 0;
		case (state)
		S0 : begin
				  nextstate = S1;
				  writeEncoderR = 1;
			  end
		S1 : begin
				nextstate = S2;
				writeEncoderL = 1;
			  end
		S2	: begin
				  nextstate = S3;
				  readLED = 1;
			  end
		S3 : begin
				  nextstate = S0;
				  writeLaser = 1;
			  end
		default: nextstate = S0;
		endcase
	end
	
//==============================	
//CALL TO OUTSIDE MODULE
//==============================
	logic dir1, dir2;
	logic [31:0] laser;
	clock_reduce clock_reduce_3(CLOCK_50,reduce3, clk2);
	clock_reduce clock_reduce(CLOCK_50,reduce, clk);
	wheel_count wheel_count_left(.clk(CLOCK_50),.rst(KEY[0]), .codeA(codeAL), .codeB(codeBL),.count(wheel_left));
	wheel_count wheel_count_right(.clk(CLOCK_50),.rst(KEY[0]), .codeA(codeAR), .codeB(codeBR),.count(wheel_right));
	laser_count laser_count(.clk(CLOCK_50),.Opto(GPIO[7]),.Laser(GPIO[8]), .codeA(GPIO[4]), .codeB(GPIO[5]),.count(laser));
	logic [31:0] count;
	//assign LED[0] = dir1;
	//assign LED[1] = dir2;
	
//DYNAMIXEL

	logic write_d, read_d; 
	logic [31:0] data_OUT, data_IN, data1, data2;
	logic [7:0] checksum;
	


stepper gripper(.clk(CLOCK_50),
					 .dir(GPIO[5]),
					 .step(GPIO[7]));



endmodule
